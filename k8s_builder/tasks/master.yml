---

- name: create dir to save config files
  file:
    path: /home/{{ user }}/kube
    state: directory
    owner: "{{ user }}"
    group: "{{ user }}"
  register: dir_created

- name: Download calico.yml 
  get_url:
    url: "{{ calico_url }}"
    dest: "{{ calico_deployment_file }}"
  become_user: "{{ user }}"
  register: calico_file
  when: dir_created is changed

- name: generate default kubeadm config file
  command: kubeadm config print init-defaults 
  become_user: "{{ user }}"
  register: kubeadm_config
  when: calico_file is changed

- name: save output to a file
  lineinfile:
    line: "{{ kubeadm_config.stdout }}"
    path: "{{ cluster_settings_file }}"
    create: yes
    owner: "{{ user }}"
    group: "{{ user }}"
  register: kubeadm_config_exist
  when: kubeadm_config is changed

- name: set kubeadm configs
  lineinfile:
    path: "{{ cluster_settings_file }}" 
    regexp: "{{ item.regexp | default(omit)}}"
    line: "{{ item.line }}"
    backrefs: "{{ item.backrefs | default(omit) }}"
    insertafter: "{{ item.insertafter | default(omit) }}"
  when: kubeadm_config_exist is changed
  loop: "{{ kubeadm_settings }}"

- name: generate kubernetes config
  command: "kubeadm init \
    --config={{ cluster_settings_file }} \
    --cri-socket /run/containerd/containerd.sock"
  register: config_generated
  when: kubeadm_config is changed

- name: create hiding dir for user
  file:
    path: "/home/{{ user }}/.kube"
    state: directory
    owner: "{{ user }}"
    group: "{{ user }}"

- name: copy admin config
  copy:
    src: "/etc/kubernetes/admin.conf"
    dest: "/home/{{ user }}/.kube/config"
    owner: "{{ user }}"
    group: "{{ user }}"
    remote_src: yes
  when: config_generated is changed 

- name: add socket to kubeadm and configure control plane account
  command: "kubectl apply -f  {{ calico_file.dest }}"
  become_user: "{{ user }}"
  when: config_generated is changed

- name: install bash-completion on control plane
  apt:
    name: bash-completion
    state: present
    force_apt_get: yes
  register: completion_installed

- name: add kubernetes bash completion
  lineinfile:
    path: "/home/{{ user }}/.bashrc"
    line: "source <(kubectl completion bash)"
  become_user: "{{ user }}"
  register: bash_completion

- name: get join command from kubeadm
  command: kubeadm token create --print-join-command
  register: cp_join_command
  
- name: set join command fact
  set_fact:
    join_command: "sudo {{ cp_join_command.stdout_lines[0] }}"
  when: cp_join_command is defined  
