---
# tasks file for k8s_builder for all nodes

- name: remove swap line in fstab
  mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  register: fstab_result
  loop:
    - swap
    - none

- name: swap off
  command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: reboot the system
  reboot:
    msg: rebooting to apply swap changes
  when: fstab_result is changed

- name: load containerd prereq
  command: "{{ item }}"
  loop:
    - modprobe overlay
    - modprobe br_netfilter

- name: add containerd config
  lineinfile:
    path: /etc/modules-load.d/containerd.conf
    line: "{{ item }}"
    create: yes
  loop:
    - overlay
    - br_netfilter

- name: apply sysctl params
  sysctl:
    name: "{{ item }}"
    value: '1'
    state: present
    sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
    reload: yes
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.ipv4.ip_forward
    - net.bridge.bridge-nf-call-ip6tables

- name: make sure containerd config directory exist
  file:
    path: /etc/containerd
    state: directory
  register: containerd_dir_created

- name: add apt signing keys for kubernetes
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present

- name: add kubernetes repo
  apt_repository:
    repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: kubernetes.list
  register: repo_added

- name: install packages
  apt:
    name: "{{ item }}={{ kube_version }}"
    state: present
    force_apt_get: yes
  register: installed_packages
  loop: "{{ kube_packages }}"

- name: install containerd
  apt:
    name: containerd
    state: present
    force_apt_get: yes
  register: containerd_installed

- name: hold packages from being upgraded
  dpkg_selections:
    name: "{{ item }}"
    selection: hold
  when: installed_packages is changed and containerd_installed is changed
  loop: "{{ kube_packages + ['containerd'] }}"

- name: generate containerd config
  command: containerd config default 
  register: containerd_config
  when: containerd_dir_created is changed

- name: save output to a file
  lineinfile:
    line: "{{ containerd_config.stdout }}"
    path: "{{ containerd_file }}"
    create: yes
  register: containerd_config_exist
  when: containerd_config is changed

- name: set containerd config
  lineinfile:
    path: "{{ containerd_file }}"
    line: "\t  [plugins.\"io.containerd.grpc.v1.cri\".containerd.runtimes.runc.options]\n
    \t    SystemdCgroup = true"
    insertafter: '^(.*)privileged_without_host_devices = false(.*)$'
  register: containerd_config
  when: containerd_config_exist is defined
  notify: "restart containerd service"

- name: Configure node ip
  lineinfile:
    path: "{{ kubelet_default }}"
    line: KUBELET_EXTRA_ARGS=--node-ip={{ ansible_eth1['ipv4']['address'] }}
    create: yes
  notify: "restart kubelet service"

- name: set node type
  set_fact:
    node_type: "{{ 'admin' if ('cp1' in inventory_hostname) else 'worker' if ('node' in inventory_hostname) }}"


- name: working on {{ node_type }}
  import_tasks: master.yml
  when: node_type == 'admin'

- name: working on {{ node_type }}
  import_tasks: node_addition.yml
  when: node_type == 'worker'
