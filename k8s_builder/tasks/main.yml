---
# tasks file for k8s_builder for all nodes

- name: remove swap line in fstab
  ansible.posix.mount:
    name: "{{ item }}"
    fstype: swap
    state: absent
  register: fstab_result
  loop:
    - swap
    - none

- name: swap off
  ansible.builtin.command: swapoff -a
  when: ansible_swaptotal_mb > 0

- name: set timezone
  ansible.builtin.file:
    src: "/usr/share/zoneinfo/UTC"
    path: "/etc/localtime"

- name: load containerd prereq
  ansible.builtin.command: "{{ item }}"
  loop:
    - modprobe overlay
    - modprobe br_netfilter

- name: add containerd config
  ansible.builtin.lineinfile:
    path: "/etc/modules-load.d/containerd.conf"
    line: "{{ item }}"
    create: yes
    mode: "0644"
  loop:
    - overlay
    - br_netfilter

- name: apply sysctl params
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: '1'
    state: present
    sysctl_file: "/etc/sysctl.d/99-kubernetes-cri.conf"
    reload: yes
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.ipv4.ip_forward
    - net.bridge.bridge-nf-call-ip6tables

- name: reboot the system
  ansible.builtin.reboot:
    msg: rebooting to apply swap changes
  when: fstab_result is changed

- name: make sure containerd config directory exist
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: "0644"
  register: containerd_dir_created
  loop:
    - "/etc/apt/keyrings"
    - "/etc/containerd"

- name: add apt signing keys for kubernetes
  ansible.builtin.apt_key:
    url: "{{ item }}"
    state: present
  loop:
    - "https://download.docker.com/linux/ubuntu/gpg"
    - "https://packages.cloud.google.com/apt/doc/apt-key.gpg"

- name: get space architecture
  ansible.builtin.command:
    cmd: "dpkg --print-architecture"
  args: false
  register: deb_arch

- name: add repositories
  ansible.builtin.apt_repository:
    repo: "{{ item.repo }}"
    state: present
    filename: "{{ item.file }}"
  register: repo_added
  loop:
    - { repo: "{{ docker_repo }}", file: "docker.list" }
    - { repo: "deb https://apt.kubernetes.io/ kubernetes-xenial main", file: "kubernetes.list" }

- name: install packages
  ansible.builtin.apt:
    name: "{{ item }}={{ kube_version }}"
    state: present
    force_apt_get: yes
  register: installed_packages
  loop: "{{ kube_packages }}"

- name: install containerd
  ansible.builtin.apt:
    name: 
      - containerd.io
      - python3-pip
    state: present
    force_apt_get: yes
    update_cache: yes
  register: containerd_installed

- name: hold packages from being upgraded
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  when: installed_packages is changed and containerd_installed is changed
  loop: "{{ kube_packages + ['containerd'] }}"

- name: generate containerd config
  ansible.builtin.command: containerd config default
  register: containerd_config
  when: containerd_dir_created is changed

- name: remove old containerd configs
  ansible.builtin.file:
    path: "{{ containerd_file }}"
    state: absent
  register: containerd_config_removed
  when: containerd_config is changed

- name: save output to a file
  ansible.builtin.lineinfile:
    line: "{{ containerd_config.stdout }}"
    path: "{{ containerd_file }}"
    create: yes
    mode: "0644"
  register: containerd_config_exist
  when: containerd_config is changed

- name: set containerd config
  lineinfile:
    path: "{{ containerd_file }}"
    regexp: "^(.*)SystemdCgroup(.*)$"
    line: "\t    SystemdCgroup = true"
    insertafter: '^(.*)ShimCgroup(.*)$'
    backrefs: yes
  register: containerd_config
  when: >
      "(containerd_config_exist is defined) and 
       (containerd_config_removed is changed) or 
       (containerd_config_removed is changed)"
  notify: "restart containerd service"

- name: flush handlers
  ansible.builtin.meta: flush_handlers

- name: configure node ip
  ansible.builtin.lineinfile:
    path: "{{ kubelet_default }}"
    line: "KUBELET_EXTRA_ARGS=--node-ip={{ ansible_eth1['ipv4']['address'] }}"
    create: yes
    mode: "0644"
  notify: "restart kubelet service"

- name: set node type
  ansible.builtin.set_fact:
    node_type: "{{ 'control-plane' if ('cp1' in inventory_hostname) else 
                   'backup-plane' if ('cpb' in inventory_hostname) else 
                   'worker' if ('node' in inventory_hostname) }}"

- name: "working on {{ node_type }}"
  ansible.builtin.include_tasks: "{{ node_type }}.yml"

- block:
    - name: update node role
      kubernetes.core.k8s:
        state: patched
        kind: Node
        name: 
        definition:
          metadata:
            name: "{{ ansible_hostname }}"
            labels:
              kubernetes.io/role: "{{ node_type  }}"
  become_user: "{{ user }}"
  delegate_to: "{{ groups['cp1'][0] }}"

- name: installing helm
  ansible.builtin.include_tasks: helm.yml
  when: node_type == 'control-plane'
